2864. Maximum Odd Binary Number


You are given a binary string s that contains at least one '1'.

You have to rearrange the bits in such a way that the resulting binary number is the maximum odd binary number that can be created from this combination.

Return a string representing the maximum odd binary number that can be created from the given combination.

Note that the resulting string can have leading zeros.



Example 1:

Input: s = "010"
Output: "001"
Explanation: Because there is just one '1', it must be in the last position. So the answer is "001".
Example 2:

Input: s = "0101"
Output: "1001"
Explanation: One of the '1's must be in the last position. The maximum number that can be made with the remaining digits is "100". So the answer is "1001".



Solution :

  string maximumOddBinaryNumber(string s) {
        
       vector<char>str;
         int size = s.length();
        int count0 = 0;
        int count1 = 0;
        
        for (int i = 0; i < size; i++) {
            if (s[i] == '0') {
                count0++;
            } else {
                count1++;
            }
        }
        
        if (count1 == 1) {
            std::sort(s.begin(), s.end());
            return s;
        } else {
            for (int i = 0; i < count1 - 1; i++) {
                str.push_back('1');
            }
            for (int i = 0; i < count0; i++) {
                str.push_back('0');
            }
            str.push_back('1');
            return string(str.begin(), str.end());
        }
    }


Optimize Solution:-


	string maximumOddBinaryNumber(string s) {
		int count0 = count(s.begin(), s.end(), '0');
        	int count1 = count(s.begin(), s.end(), '1');
        	if (count1 == 1) {
            	sort(s.begin(), s.end());
            	return s;
        	 } else {
            	string result(count1 - 1, '1');
            	result.append(count0, '0');
            	result.push_back('1');
            	return result;
       	    }
	}
        